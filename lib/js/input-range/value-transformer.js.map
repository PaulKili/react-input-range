{"version":3,"sources":["../../../src/js/input-range/value-transformer.js"],"names":["getPercentageFromPosition","getValueFromPosition","getValueFromProps","getPercentageFromValue","getPercentagesFromValues","getPositionFromValue","getPositionsFromValues","getPositionFromEvent","getStepValueFromValue","position","clientRect","length","width","sizePerc","x","minValue","maxValue","console","log","valueDiff","props","isMultiValue","value","min","max","validValue","valuePerc","values","positionValue","y","event","touches","clientX","left","valuePerStep","Math","round"],"mappings":"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","file":"value-transformer.js","sourcesContent":["import { clamp } from '../utils';\n\n/**\n * Convert a point into a percentage value\n * @ignore\n * @param {Point} position\n * @param {ClientRect} clientRect\n * @return {number} Percentage value\n */\nexport function getPercentageFromPosition(position, clientRect) {\n  const length = clientRect.width;\n  const sizePerc = position.x / length;\n\n  return sizePerc || 0;\n}\n\n/**\n * Convert a point into a model value\n * @ignore\n * @param {Point} position\n * @param {number} minValue\n * @param {number} maxValue\n * @param {ClientRect} clientRect\n * @return {number}\n */\nexport function getValueFromPosition(position, minValue, maxValue, clientRect) {\n  console.log('clientRect: ', clientRect);\n  const sizePerc = getPercentageFromPosition(position, clientRect);\n  const valueDiff = maxValue - minValue;\n\n  return minValue + (valueDiff * sizePerc);\n}\n\n/**\n * Convert props into a range value\n * @ignore\n * @param {Object} props\n * @param {boolean} isMultiValue\n * @return {Range}\n */\nexport function getValueFromProps(props, isMultiValue) {\n  if (isMultiValue) {\n    return { ...props.value };\n  }\n\n  return {\n    min: props.minValue,\n    max: props.value,\n  };\n}\n\n/**\n * Convert a model value into a percentage value\n * @ignore\n * @param {number} value\n * @param {number} minValue\n * @param {number} maxValue\n * @return {number}\n */\nexport function getPercentageFromValue(value, minValue, maxValue) {\n  const validValue = clamp(value, minValue, maxValue);\n  const valueDiff = maxValue - minValue;\n  const valuePerc = (validValue - minValue) / valueDiff;\n\n  return valuePerc || 0;\n}\n\n/**\n * Convert model values into percentage values\n * @ignore\n * @param {Range} values\n * @param {number} minValue\n * @param {number} maxValue\n * @return {Range}\n */\nexport function getPercentagesFromValues(values, minValue, maxValue) {\n  return {\n    min: getPercentageFromValue(values.min, minValue, maxValue),\n    max: getPercentageFromValue(values.max, minValue, maxValue),\n  };\n}\n\n/**\n * Convert a value into a point\n * @ignore\n * @param {number} value\n * @param {number} minValue\n * @param {number} maxValue\n * @param {ClientRect} clientRect\n * @return {Point} Position\n */\nexport function getPositionFromValue(value, minValue, maxValue, clientRect) {\n  const length = clientRect.width;\n  const valuePerc = getPercentageFromValue(value, minValue, maxValue);\n  const positionValue = valuePerc * length;\n\n  return {\n    x: positionValue,\n    y: 0,\n  };\n}\n\n/**\n * Convert a range of values into points\n * @ignore\n * @param {Range} values\n * @param {number} minValue\n * @param {number} maxValue\n * @param {ClientRect} clientRect\n * @return {Range}\n */\nexport function getPositionsFromValues(values, minValue, maxValue, clientRect) {\n  return {\n    min: getPositionFromValue(values.min, minValue, maxValue, clientRect),\n    max: getPositionFromValue(values.max, minValue, maxValue, clientRect),\n  };\n}\n\n/**\n * Convert an event into a point\n * @ignore\n * @param {Event} event\n * @param {ClientRect} clientRect\n * @return {Point}\n */\nexport function getPositionFromEvent(event, clientRect) {\n  const length = clientRect.width;\n  const { clientX } = event.touches ? event.touches[0] : event;\n\n  return {\n    x: clamp(clientX - clientRect.left, 0, length),\n    y: 0,\n  };\n}\n\n/**\n * Convert a value into a step value\n * @ignore\n * @param {number} value\n * @param {number} valuePerStep\n * @return {number}\n */\nexport function getStepValueFromValue(value, valuePerStep) {\n  return Math.round(value / valuePerStep) * valuePerStep;\n}\n"]}